// <auto-generated />
using System;
using System.Collections.Generic;
using DatabaseBroker;
using Entity.Models.Common;
using Entity.Models.Order;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseBroker.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251016214437_update_product")]
    partial class update_product
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Models.File.FileModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.HasKey("Id");

                    b.ToTable("file_model");
                });

            modelBuilder.Entity("Entity.Models.Order.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<List<ProductItem>>("ProductsId")
                        .HasColumnType("jsonb")
                        .HasColumnName("products_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("cart");
                });

            modelBuilder.Entity("Entity.Models.Order.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delivery_date");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer")
                        .HasColumnName("order_status");

                    b.Property<List<long>>("ProductsIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("products_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Entity.Models.Product.Categories.FoodProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("FoodProductCategoryImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_product_image_id");

                    b.Property<MultiLanguageField>("FoodProductCategoryName")
                        .HasColumnType("jsonb")
                        .HasColumnName("food_produc_category_name");

                    b.HasKey("Id");

                    b.HasIndex("FoodProductCategoryImageId");

                    b.ToTable("food_product_categories");
                });

            modelBuilder.Entity("Entity.Models.Product.Categories.HouseholdProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("HouseHoldCategoryImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("house_hold_category_image_id");

                    b.Property<MultiLanguageField>("HouseHoldProductCategoryName")
                        .HasColumnType("jsonb")
                        .HasColumnName("house_hold_category_name");

                    b.HasKey("Id");

                    b.HasIndex("HouseHoldCategoryImageId");

                    b.ToTable("household_product_categories");
                });

            modelBuilder.Entity("Entity.Models.Product.Categories.MainProductCategories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("MainCategoryImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("main_category_image_id");

                    b.Property<MultiLanguageField>("MainCategoryName")
                        .HasColumnType("jsonb")
                        .HasColumnName("main_category_name");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryImageId");

                    b.ToTable("main_product_categories");
                });

            modelBuilder.Entity("Entity.Models.Product.Products.FoodProducts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<MultiLanguageField>("About")
                        .HasColumnType("jsonb")
                        .HasColumnName("about");

                    b.Property<long>("FoodCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_category_id");

                    b.Property<long>("MainCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("main_category_id");

                    b.Property<MultiLanguageField>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_image_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("ProductImageId");

                    b.HasIndex("TagId");

                    b.ToTable("food_products");
                });

            modelBuilder.Entity("Entity.Models.Product.Products.HouseholdProducts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<MultiLanguageField>("About")
                        .HasColumnType("jsonb")
                        .HasColumnName("about");

                    b.Property<long>("HouseholdCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("hose_hold_category_id");

                    b.Property<long>("MainCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("main_category_id");

                    b.Property<MultiLanguageField>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_image_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("Id");

                    b.HasIndex("HouseholdCategoryId");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("ProductImageId");

                    b.HasIndex("TagId");

                    b.ToTable("household_products");
                });

            modelBuilder.Entity("Entity.Models.Product.Products.OilProducts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<MultiLanguageField>("About")
                        .HasColumnType("jsonb")
                        .HasColumnName("about");

                    b.Property<long>("MainCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("main_category_id");

                    b.Property<MultiLanguageField>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_image_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("ProductImageId");

                    b.HasIndex("TagId");

                    b.ToTable("oil_products");
                });

            modelBuilder.Entity("Entity.Models.Product.Products.WaterAndDrinks", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<MultiLanguageField>("About")
                        .HasColumnType("jsonb")
                        .HasColumnName("about");

                    b.Property<long>("MainCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("main_category_id");

                    b.Property<MultiLanguageField>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_image_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("ProductImageId");

                    b.HasIndex("TagId");

                    b.ToTable("water_and_drinks");
                });

            modelBuilder.Entity("Entity.Models.Product.Tags.FoodProductTags", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<MultiLanguageField>("TagName")
                        .HasColumnType("jsonb")
                        .HasColumnName("tag_name");

                    b.HasKey("Id");

                    b.ToTable("food_product_tags");
                });

            modelBuilder.Entity("Entity.Models.Product.Tags.HouseholdProductTags", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<MultiLanguageField>("TagName")
                        .HasColumnType("jsonb")
                        .HasColumnName("tag_name");

                    b.HasKey("Id");

                    b.ToTable("household_product_tags");
                });

            modelBuilder.Entity("Entity.Models.Product.Tags.OilProductTags", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<MultiLanguageField>("TagName")
                        .HasColumnType("jsonb")
                        .HasColumnName("tag_name");

                    b.HasKey("Id");

                    b.ToTable("oil_product_tags");
                });

            modelBuilder.Entity("Entity.Models.Product.Tags.WaterAndDrinksTags", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<MultiLanguageField>("TagName")
                        .HasColumnType("jsonb")
                        .HasColumnName("tag_name");

                    b.HasKey("Id");

                    b.ToTable("water_and_drinks_tags");
                });

            modelBuilder.Entity("Entity.Models.Translation.Translation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("En")
                        .HasColumnType("text")
                        .HasColumnName("en")
                        .HasAnnotation("Relational:JsonPropertyName", "en");

                    b.Property<string>("Ger")
                        .HasColumnType("text")
                        .HasColumnName("ger")
                        .HasAnnotation("Relational:JsonPropertyName", "ger");

                    b.Property<string>("Ru")
                        .HasColumnType("text")
                        .HasColumnName("ru")
                        .HasAnnotation("Relational:JsonPropertyName", "ru");

                    b.Property<string>("Uz")
                        .HasColumnType("text")
                        .HasColumnName("uz")
                        .HasAnnotation("Relational:JsonPropertyName", "uz");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("translations");
                });

            modelBuilder.Entity("Entity.Models.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("boolean")
                        .HasColumnName("IsSigned");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Entity.Models.Order.Cart", b =>
                {
                    b.HasOne("Entity.Models.Users.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entity.Models.Order.Order", b =>
                {
                    b.HasOne("Entity.Models.Users.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entity.Models.Product.Categories.FoodProductCategory", b =>
                {
                    b.HasOne("Entity.Models.File.FileModel", "CategoryImage")
                        .WithMany()
                        .HasForeignKey("FoodProductCategoryImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryImage");
                });

            modelBuilder.Entity("Entity.Models.Product.Categories.HouseholdProductCategory", b =>
                {
                    b.HasOne("Entity.Models.File.FileModel", "CategoryImage")
                        .WithMany()
                        .HasForeignKey("HouseHoldCategoryImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryImage");
                });

            modelBuilder.Entity("Entity.Models.Product.Categories.MainProductCategories", b =>
                {
                    b.HasOne("Entity.Models.File.FileModel", "CategoryImage")
                        .WithMany()
                        .HasForeignKey("MainCategoryImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryImage");
                });

            modelBuilder.Entity("Entity.Models.Product.Products.FoodProducts", b =>
                {
                    b.HasOne("Entity.Models.Product.Categories.FoodProductCategory", "FoodProductCategory")
                        .WithMany()
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Product.Categories.MainProductCategories", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.File.FileModel", "Image")
                        .WithMany()
                        .HasForeignKey("ProductImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Product.Tags.FoodProductTags", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodProductCategory");

                    b.Navigation("Image");

                    b.Navigation("MainCategory");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Entity.Models.Product.Products.HouseholdProducts", b =>
                {
                    b.HasOne("Entity.Models.Product.Categories.HouseholdProductCategory", "HouseholdProductCategory")
                        .WithMany()
                        .HasForeignKey("HouseholdCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Product.Categories.MainProductCategories", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.File.FileModel", "Image")
                        .WithMany()
                        .HasForeignKey("ProductImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Product.Tags.HouseholdProductTags", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HouseholdProductCategory");

                    b.Navigation("Image");

                    b.Navigation("MainCategory");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Entity.Models.Product.Products.OilProducts", b =>
                {
                    b.HasOne("Entity.Models.Product.Categories.MainProductCategories", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.File.FileModel", "Image")
                        .WithMany()
                        .HasForeignKey("ProductImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Product.Tags.OilProductTags", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("MainCategory");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Entity.Models.Product.Products.WaterAndDrinks", b =>
                {
                    b.HasOne("Entity.Models.Product.Categories.MainProductCategories", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.File.FileModel", "Image")
                        .WithMany()
                        .HasForeignKey("ProductImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Product.Tags.WaterAndDrinksTags", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("MainCategory");

                    b.Navigation("Tag");
                });
#pragma warning restore 612, 618
        }
    }
}
